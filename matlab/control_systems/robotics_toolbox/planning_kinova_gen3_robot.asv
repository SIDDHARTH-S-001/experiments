% This script is for planning, task execution and trajectory using Kinova Gen3 robotic arm

% Load the rigid body tree of the Kinova Gen3 Robot
robot = loadrobot('kinovaGen3','DataFormat','row','Gravity',[0 0 -9.81]);

% set configuration
currentRobotJConfig = homeConfiguration(robot);

% get the no of joints and the eef frame
numJoints = numel(currentRobotJConfig);
endEffector = "EndEffector_Link";

% set trajectory time and approx tool speed
timeStep = 0.1; % seconds
toolSpeed = 0.1; % m/s

% set initial and final pose of eef
jointInit = currentRobotJConfig;
taskInit = getTransform(robot,jointInit,endEffector);
taskFinal = trvec2tform([0.4,0,0.6])*axang2tform([0 1 0 pi]);

% Compute task-space trajectory waypoints via interpolation.
% 1) compute tool travelling distance
distance = norm(tform2trvec(taskInit)-tform2trvec(taskFinal));

% 2) define traj times based on travelling distance and tool speed
initTime = 0;
finalTime = (distance/toolSpeed) - initTime;
trajTimes = initTime:timeStep:finalTime;
timeInterval = [trajTimes(1); trajTimes(end)];

% 3) Interpolate between taskInit and taskFinal to compute intermediate task-space waypoints.
[taskWaypoints,taskVelocities] = transformtraj(taskInit,taskFinal,timeInterval,trajTimes); 

% Create a task space motion model for PD control on the joints.
tsMotionModel = taskSpaceMotionModel('RigidBodyTree',robot,'EndEffectorName','EndEffector_Link');

% Set the proportional and derivative gains on orientation to zero, so that controlled behavior just follows the reference positions
tsMotionModel.Kp(1:3,1:3) = 0;
tsMotionModel.Kd(1:3,1:3) = 0;

% Define the initial states
q0 = currentRobotJConfig; 
qd0 = zeros(size(q0));

































