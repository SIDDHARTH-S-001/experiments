%% Create a custom arm out of DH table
% order of parameters (column) of DH table -> a, alpha, d, theta
% naturally theta is ignored for initial configuration
l1 = 0.46;
l2 = 0.38;
dhParams = [0  0 0 0;
            l1 0 0 0;
            l2 0 0 0];

% create a rigid body tree
robot = rigidBodyTree;

% Create a cell array for the rigid body object, and another for the joint objects
bodies = cell(3,1);
joints = cell(3,1);
for i = 1:3
    % Create a rigidBody object with a unique name.
    bodies{i} = rigidBody(['body' num2str(i)]);
    % Create and name a revolute rigidBodyJoint object.
    joints{i} = rigidBodyJoint(['jnt' num2str(i)],"revolute");
    % Use setFixedTransform to specify the body-to-body transformation of the joint using DH parameters. 
    setFixedTransform(joints{i},dhParams(i,:),"dh");
    bodies{i}.Joint = joints{i};
    % Attach each body to the tree
    if i == 1 % Add first body to base
        addBody(robot,bodies{i},"base")
    else % Add current body to previous body by name
        addBody(robot,bodies{i},bodies{i-1}.Name)
    end
end

showdetails(robot)

% figure(Name="3R Robot Interactive GUI")
gui = interactiveRigidBodyTree(robot,MarkerScaleFactor=0.5);

%% Kinematics

t = (0:0.2:10)'; % Time
count = length(t);
center = [0.3 0.1 0];
radius = 0.15;
theta = t*(2*pi/t(end));
points = center + radius*[cos(theta) sin(theta) zeros(size(theta))];

% Pre-allocate configuration solutions as a matrix qs.
q0 = homeConfiguration(robot);
ndof = length(q0);
qs = zeros(count, ndof);

% Because the xy Cartesian points are the only important factors of the end-effector pose for this workflow, 
% specify a non-zero weight for the fourth and fifth elements of the weight vector. 
% All other elements are set to zero.
ik = inverseKinematics('RigidBodyTree', robot);
weights = [0, 0, 0, 1, 1, 0];
endEffector = 'tool';
